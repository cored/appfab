-# Pass me an +owner+ (Idea or Comment)
-# Options: +format+, one of 'big' (Default) or 'small' (Link only, no listing)
-# +drop_area+ a selector (mandatory).
:ruby
  owner     = local_assigns.fetch(:owner)
  format    = local_assigns.fetch(:format, 'big')
  drop_area = local_assigns.fetch(:drop_area, nil)

  case owner
  when Idea
    upload_endpoint  = idea_attachments_path(owner)
    refresh_endpoint = idea_path(owner, part:'attachments')
    refresh_target   = "#idea_attachments"
  when Comment
    upload_endpoint  = comment_attachments_path(owner)
    refresh_endpoint = comment_path(owner, part:'attachments')
    refresh_target   = "##{dom_id owner} .attachments"
  else
    raise ArgumentError.new(owner)
  end

  uploader_id = "uploader_#{SecureRandom.hex(4)}"

- if can?(:update, owner)
  - if format == 'big'
    - uploader_tempate = capture do
      .qq-uploader<
        .btn.btn-block.qq-upload-button>
          .drop-area.qq-upload-drop-area<>
          %i.icon-upload
          = _('Attach a file')
        .qq-drop-processing<>
          .qq-drop-processing-spinner<>
        %ul.qq-upload-list<>
  - elsif format == 'small'
    - uploader_tempate = capture do
      .qq-uploader<
        .qq-upload-button>
          .drop-area.qq-upload-drop-area<>
          %i.icon-upload
        .qq-drop-processing<>
          .qq-drop-processing-spinner<>
        .qq-upload-list<>
  - file_template = capture do
    %li.alert<
      .qq-progress-bar<>
      %span.qq-upload-spinner>
      %span.qq-upload-finished>
      %span.qq-upload-file>
      %span.qq-upload-size>
      %a.qq-upload-cancel{ href: '#' }= _('Cancel')
      %a.qq-upload-retry{ href: '#' }= _('Retry')
      %span.qq-upload-status-text

  .af-uploader{ id:uploader_id }
  :coffeescript
    $(document).ready(() ->
      uploader = new qq.FineUploader(
        debug:              true
        element:            document.getElementById('#{uploader_id}')
        classes:
          success:          'alert alert-success'
          fail:             'alert alert-error'
        template:           '#{j uploader_tempate}'
        fileTemplate:       '#{j file_template}'
        dragAndDrop:
          extraDropzones:   $('#{drop_area}')
          hideDropzones:    false
          disableDefaultDropzone: #{!drop_area}
        request:
          endpoint:         '#{upload_endpoint}'
          customHeaders:
            'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
          forceMultipart:   true
          inputName:        'attachment[file]'
        validation:
          allowedExtensions: ['jpg', 'png', 'txt', 'md', 'rtf', 'csv', 'doc', 'docx', 'xls', 'xlsx', 'pdf', 'ods', 'odt']
          sizeLimit:         #{5 * (1<<20)}
        callbacks:
          onComplete: (id, name, data) ->
            #debugger
            $('#{refresh_target}').load('#{refresh_endpoint}')
            if data.success
              $('##{uploader_id} .qq-upload-list').eq(id).fadeOut()

      )
    )
- else
  - case format 
  - when 'big'
    .btn.btn-block.disabled{ title:not_authorized_message(:update, owner) }
      %i.icon-upload
      = _('Attach a file')
  - when 'small'
    %a.disabled{ title:not_authorized_message(:update, owner) }
      %i.icon-paperclip
